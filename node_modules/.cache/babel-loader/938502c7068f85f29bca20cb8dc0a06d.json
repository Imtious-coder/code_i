{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.isMAC = void 0; // Prepare\n\nconst os_1 = require('os');\n\nconst macRegex = /(?:[a-z0-9]{1,2}[:-]){5}[a-z0-9]{1,2}/i;\nconst zeroRegex = /(?:[0]{1,2}[:-]){5}[0]{1,2}/;\n/**\n * Get the first proper MAC address\n * @param iface If provided, restrict MAC address fetching to this interface\n */\n\nfunction getMAC(iface) {\n  const list = os_1.networkInterfaces();\n\n  if (iface) {\n    const parts = list[iface];\n\n    if (!parts) {\n      throw new Error(`interface ${iface} was not found`);\n    }\n\n    for (const part of parts) {\n      if (zeroRegex.test(part.mac) === false) {\n        return part.mac;\n      }\n    }\n\n    throw new Error(`interface ${iface} had no valid mac addresses`);\n  } else {\n    for (const [key, parts] of Object.entries(list)) {\n      // for some reason beyond me, this is needed to satisfy typescript\n      // fix https://github.com/bevry/getmac/issues/100\n      if (!parts) continue;\n\n      for (const part of parts) {\n        if (zeroRegex.test(part.mac) === false) {\n          return part.mac;\n        }\n      }\n    }\n  }\n\n  throw new Error('failed to get the MAC address');\n}\n\nexports.default = getMAC;\n/** Check if the input is a valid MAC address */\n\nfunction isMAC(macAddress) {\n  return macRegex.test(macAddress);\n}\n\nexports.isMAC = isMAC;","map":{"version":3,"sources":["D:/Projects/Interview Task-1 (CircileDiGroup)/client/node_modules/getmac/edition-esnext/index.js"],"names":["Object","defineProperty","exports","value","isMAC","os_1","require","macRegex","zeroRegex","getMAC","iface","list","networkInterfaces","parts","Error","part","test","mac","key","entries","default","macAddress"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArB,C,CACA;;AACA,MAAMC,IAAI,GAAGC,OAAO,CAAC,IAAD,CAApB;;AACA,MAAMC,QAAQ,GAAG,wCAAjB;AACA,MAAMC,SAAS,GAAG,6BAAlB;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACtB,QAAMC,IAAI,GAAGN,IAAI,CAACO,iBAAL,EAAb;;AACA,MAAIF,KAAJ,EAAW;AACV,UAAMG,KAAK,GAAGF,IAAI,CAACD,KAAD,CAAlB;;AACA,QAAI,CAACG,KAAL,EAAY;AACX,YAAM,IAAIC,KAAJ,CAAW,aAAYJ,KAAM,gBAA7B,CAAN;AACA;;AACD,SAAK,MAAMK,IAAX,IAAmBF,KAAnB,EAA0B;AACzB,UAAIL,SAAS,CAACQ,IAAV,CAAeD,IAAI,CAACE,GAApB,MAA6B,KAAjC,EAAwC;AACvC,eAAOF,IAAI,CAACE,GAAZ;AACA;AACD;;AACD,UAAM,IAAIH,KAAJ,CAAW,aAAYJ,KAAM,6BAA7B,CAAN;AACA,GAXD,MAWO;AACN,SAAK,MAAM,CAACQ,GAAD,EAAML,KAAN,CAAX,IAA2Bb,MAAM,CAACmB,OAAP,CAAeR,IAAf,CAA3B,EAAiD;AAChD;AACA;AACA,UAAI,CAACE,KAAL,EAAY;;AACZ,WAAK,MAAME,IAAX,IAAmBF,KAAnB,EAA0B;AACzB,YAAIL,SAAS,CAACQ,IAAV,CAAeD,IAAI,CAACE,GAApB,MAA6B,KAAjC,EAAwC;AACvC,iBAAOF,IAAI,CAACE,GAAZ;AACA;AACD;AACD;AACD;;AACD,QAAM,IAAIH,KAAJ,CAAU,+BAAV,CAAN;AACA;;AACDZ,OAAO,CAACkB,OAAR,GAAkBX,MAAlB;AACA;;AACA,SAASL,KAAT,CAAeiB,UAAf,EAA2B;AAC1B,SAAOd,QAAQ,CAACS,IAAT,CAAcK,UAAd,CAAP;AACA;;AACDnB,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["'use strict'\nObject.defineProperty(exports, '__esModule', { value: true })\nexports.isMAC = void 0\n// Prepare\nconst os_1 = require('os')\nconst macRegex = /(?:[a-z0-9]{1,2}[:-]){5}[a-z0-9]{1,2}/i\nconst zeroRegex = /(?:[0]{1,2}[:-]){5}[0]{1,2}/\n/**\n * Get the first proper MAC address\n * @param iface If provided, restrict MAC address fetching to this interface\n */\nfunction getMAC(iface) {\n\tconst list = os_1.networkInterfaces()\n\tif (iface) {\n\t\tconst parts = list[iface]\n\t\tif (!parts) {\n\t\t\tthrow new Error(`interface ${iface} was not found`)\n\t\t}\n\t\tfor (const part of parts) {\n\t\t\tif (zeroRegex.test(part.mac) === false) {\n\t\t\t\treturn part.mac\n\t\t\t}\n\t\t}\n\t\tthrow new Error(`interface ${iface} had no valid mac addresses`)\n\t} else {\n\t\tfor (const [key, parts] of Object.entries(list)) {\n\t\t\t// for some reason beyond me, this is needed to satisfy typescript\n\t\t\t// fix https://github.com/bevry/getmac/issues/100\n\t\t\tif (!parts) continue\n\t\t\tfor (const part of parts) {\n\t\t\t\tif (zeroRegex.test(part.mac) === false) {\n\t\t\t\t\treturn part.mac\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthrow new Error('failed to get the MAC address')\n}\nexports.default = getMAC\n/** Check if the input is a valid MAC address */\nfunction isMAC(macAddress) {\n\treturn macRegex.test(macAddress)\n}\nexports.isMAC = isMAC\n"]},"metadata":{},"sourceType":"script"}