{"ast":null,"code":"/* jshint node: true */\n'use strict';\n\nvar execFile = require('child_process').execFile;\n\nmodule.exports = function (callback) {\n  execFile(\"wmic\", [\"nic\", \"get\", \"NetConnectionID\"], function (err, out) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    var ifaces = out.trim().replace(/\\s{2,}/g, \"\\n\").split(\"\\n\").slice(1);\n    var result = [];\n\n    for (var i = 0; i < ifaces.length; i += 1) {\n      var iface = ifaces[i].trim();\n\n      if (iface !== \"\") {\n        result.push(iface);\n      }\n    }\n\n    callback(null, result);\n  });\n};","map":{"version":3,"sources":["D:/Projects/Interview Task-1 (CircileDiGroup)/client/node_modules/macaddress/lib/platform/getallinterfaces_windows.js"],"names":["execFile","require","module","exports","callback","err","out","ifaces","trim","replace","split","slice","result","i","length","iface","push"],"mappings":"AAAA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,QAAxC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,QAAV,EAAoB;AACjCJ,EAAAA,QAAQ,CAAC,MAAD,EAAS,CAAC,KAAD,EAAQ,KAAR,EAAe,iBAAf,CAAT,EAA4C,UAAUK,GAAV,EAAeC,GAAf,EAAoB;AACpE,QAAID,GAAJ,EAAS;AACLD,MAAAA,QAAQ,CAACC,GAAD,EAAM,IAAN,CAAR;AACA;AACH;;AACD,QAAIE,MAAM,GAAGD,GAAG,CAACE,IAAJ,GAAWC,OAAX,CAAmB,SAAnB,EAA8B,IAA9B,EAAoCC,KAApC,CAA0C,IAA1C,EAAgDC,KAAhD,CAAsD,CAAtD,CAAb;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACO,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;AACvC,UAAIE,KAAK,GAAGR,MAAM,CAACM,CAAD,CAAN,CAAUL,IAAV,EAAZ;;AACA,UAAIO,KAAK,KAAK,EAAd,EAAkB;AACdH,QAAAA,MAAM,CAACI,IAAP,CAAYD,KAAZ;AACH;AACJ;;AACDX,IAAAA,QAAQ,CAAC,IAAD,EAAOQ,MAAP,CAAR;AACH,GAdO,CAAR;AAeH,CAhBD","sourcesContent":["/* jshint node: true */\n'use strict';\n\nvar execFile = require('child_process').execFile;\n\nmodule.exports = function (callback) {\n    execFile(\"wmic\", [\"nic\", \"get\", \"NetConnectionID\"], function (err, out) {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        var ifaces = out.trim().replace(/\\s{2,}/g, \"\\n\").split(\"\\n\").slice(1);\n        var result = [];\n        for (var i = 0; i < ifaces.length; i += 1) {\n            var iface = ifaces[i].trim();\n            if (iface !== \"\") {\n                result.push(iface);\n            }\n        }\n        callback(null, result);\n    });\n};\n"]},"metadata":{},"sourceType":"script"}