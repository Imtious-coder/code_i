{"ast":null,"code":"var os = require('os');\n\nvar _getMacAddress;\n\nvar _validIfaceRegExp = '^[a-z0-9]+$';\n\nswitch (os.platform()) {\n  case 'win32':\n    // windows has long interface names which may contain spaces and dashes\n    _validIfaceRegExp = '^[a-z0-9 -]+$';\n    _getMacAddress = require('./platform/getmacaddress_windows.js');\n    break;\n\n  case 'linux':\n    _getMacAddress = require('./platform/getmacaddress_linux.js');\n    break;\n\n  case 'darwin':\n  case 'sunos':\n  case 'freebsd':\n    _getMacAddress = require('./platform/getmacaddress_unix.js');\n    break;\n\n  default:\n    console.warn(\"node-macaddress: Unknown os.platform(), defaulting to 'unix'.\");\n    _getMacAddress = require('./platform/getmacaddress_unix.js');\n    break;\n}\n\nvar validIfaceRegExp = new RegExp(_validIfaceRegExp, 'i');\n\nmodule.exports = function (iface, callback) {\n  // some platform specific ways of resolving the mac address pass the name\n  // of the interface down to some command processor, so check for a well\n  // formed string here.\n  if (!validIfaceRegExp.test(iface)) {\n    callback(new Error(['invalid iface: \\'', iface, '\\' (must conform to reg exp /', validIfaceRegExp, '/)'].join('')), null);\n    return;\n  }\n\n  _getMacAddress(iface, callback);\n};","map":{"version":3,"sources":["D:/Projects/Interview Task-1 (CircileDiGroup)/client/node_modules/macaddress/lib/getmacaddress.js"],"names":["os","require","_getMacAddress","_validIfaceRegExp","platform","console","warn","validIfaceRegExp","RegExp","module","exports","iface","callback","test","Error","join"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AAEA,IAAIC,cAAJ;;AACA,IAAIC,iBAAiB,GAAG,aAAxB;;AACA,QAAQH,EAAE,CAACI,QAAH,EAAR;AAEI,OAAK,OAAL;AACG;AACCD,IAAAA,iBAAiB,GAAG,eAApB;AACAD,IAAAA,cAAc,GAAGD,OAAO,CAAC,qCAAD,CAAxB;AACA;;AAEJ,OAAK,OAAL;AACIC,IAAAA,cAAc,GAAGD,OAAO,CAAC,mCAAD,CAAxB;AACA;;AAEJ,OAAK,QAAL;AACA,OAAK,OAAL;AACA,OAAK,SAAL;AACIC,IAAAA,cAAc,GAAGD,OAAO,CAAC,kCAAD,CAAxB;AACA;;AAEJ;AACII,IAAAA,OAAO,CAACC,IAAR,CAAa,+DAAb;AACAJ,IAAAA,cAAc,GAAGD,OAAO,CAAC,kCAAD,CAAxB;AACA;AArBR;;AAyBA,IAAIM,gBAAgB,GAAG,IAAIC,MAAJ,CAAWL,iBAAX,EAA8B,GAA9B,CAAvB;;AAEAM,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAExC;AACA;AACA;AACA,MAAI,CAACL,gBAAgB,CAACM,IAAjB,CAAsBF,KAAtB,CAAL,EAAmC;AAC/BC,IAAAA,QAAQ,CAAC,IAAIE,KAAJ,CAAU,CACf,mBADe,EACMH,KADN,EAEf,+BAFe,EAGfJ,gBAHe,EAGG,IAHH,EAIjBQ,IAJiB,CAIZ,EAJY,CAAV,CAAD,EAIK,IAJL,CAAR;AAKA;AACH;;AAEDb,EAAAA,cAAc,CAACS,KAAD,EAAQC,QAAR,CAAd;AACH,CAfD","sourcesContent":["var os = require('os');\n\nvar _getMacAddress;\nvar _validIfaceRegExp = '^[a-z0-9]+$';\nswitch (os.platform()) {\n\n    case 'win32':\n       // windows has long interface names which may contain spaces and dashes\n        _validIfaceRegExp = '^[a-z0-9 -]+$';\n        _getMacAddress = require('./platform/getmacaddress_windows.js');\n        break;\n\n    case 'linux':\n        _getMacAddress = require('./platform/getmacaddress_linux.js');\n        break;\n\n    case 'darwin':\n    case 'sunos':\n    case 'freebsd':\n        _getMacAddress = require('./platform/getmacaddress_unix.js');\n        break;\n\n    default:\n        console.warn(\"node-macaddress: Unknown os.platform(), defaulting to 'unix'.\");\n        _getMacAddress = require('./platform/getmacaddress_unix.js');\n        break;\n\n}\n\nvar validIfaceRegExp = new RegExp(_validIfaceRegExp, 'i');\n\nmodule.exports = function (iface, callback) {\n\n    // some platform specific ways of resolving the mac address pass the name\n    // of the interface down to some command processor, so check for a well\n    // formed string here.\n    if (!validIfaceRegExp.test(iface)) {\n        callback(new Error([\n            'invalid iface: \\'', iface,\n            '\\' (must conform to reg exp /',\n            validIfaceRegExp, '/)'\n        ].join('')), null);\n        return;\n    }\n\n    _getMacAddress(iface, callback);\n}\n\n"]},"metadata":{},"sourceType":"script"}