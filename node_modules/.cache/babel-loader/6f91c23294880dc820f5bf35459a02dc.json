{"ast":null,"code":"var os = require('os'); // Retrieves all interfaces that do feature some non-internal address.\n// This function does NOT employ caching as to reflect the current state\n// of the machine accurately.\n\n\nmodule.exports = function () {\n  var allAddresses = {};\n\n  try {\n    var ifaces = os.networkInterfaces();\n  } catch (e) {\n    // At October 2016 WSL does not support os.networkInterfaces() and throws\n    // Return empty object as if no interfaces were found\n    // https://github.com/Microsoft/BashOnWindows/issues/468\n    if (e.syscall === 'uv_interface_addresses') {\n      return allAddresses;\n    } else {\n      throw e;\n    }\n\n    ;\n  }\n\n  ;\n  Object.keys(ifaces).forEach(function (iface) {\n    var addresses = {};\n    var hasAddresses = false;\n    ifaces[iface].forEach(function (address) {\n      if (!address.internal) {\n        addresses[(address.family || \"\").toLowerCase()] = address.address;\n        hasAddresses = true;\n\n        if (address.mac && address.mac !== '00:00:00:00:00:00') {\n          addresses.mac = address.mac;\n        }\n      }\n    });\n\n    if (hasAddresses) {\n      allAddresses[iface] = addresses;\n    }\n  });\n  return allAddresses;\n};","map":{"version":3,"sources":["D:/Projects/Interview Task-1 (CircileDiGroup)/client/node_modules/macaddress/lib/networkinterfaces.js"],"names":["os","require","module","exports","allAddresses","ifaces","networkInterfaces","e","syscall","Object","keys","forEach","iface","addresses","hasAddresses","address","internal","family","toLowerCase","mac"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB,C,CAEA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,YAAY;AACzB,MAAIC,YAAY,GAAG,EAAnB;;AAEA,MAAI;AACA,QAAIC,MAAM,GAAGL,EAAE,CAACM,iBAAH,EAAb;AACH,GAFD,CAEE,OAAOC,CAAP,EAAU;AACR;AACA;AACA;AACA,QAAIA,CAAC,CAACC,OAAF,KAAc,wBAAlB,EAA4C;AACxC,aAAOJ,YAAP;AACH,KAFD,MAEO;AACH,YAAMG,CAAN;AACH;;AAAA;AACJ;;AAAA;AAEDE,EAAAA,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,OAApB,CAA4B,UAAUC,KAAV,EAAiB;AACzC,QAAIC,SAAS,GAAG,EAAhB;AACA,QAAIC,YAAY,GAAG,KAAnB;AACAT,IAAAA,MAAM,CAACO,KAAD,CAAN,CAAcD,OAAd,CAAsB,UAAUI,OAAV,EAAmB;AACrC,UAAI,CAACA,OAAO,CAACC,QAAb,EAAuB;AACnBH,QAAAA,SAAS,CAAC,CAACE,OAAO,CAACE,MAAR,IAAkB,EAAnB,EAAuBC,WAAvB,EAAD,CAAT,GAAkDH,OAAO,CAACA,OAA1D;AACAD,QAAAA,YAAY,GAAG,IAAf;;AACA,YAAIC,OAAO,CAACI,GAAR,IAAeJ,OAAO,CAACI,GAAR,KAAgB,mBAAnC,EAAwD;AACpDN,UAAAA,SAAS,CAACM,GAAV,GAAgBJ,OAAO,CAACI,GAAxB;AACH;AACJ;AACJ,KARD;;AASA,QAAIL,YAAJ,EAAkB;AACdV,MAAAA,YAAY,CAACQ,KAAD,CAAZ,GAAsBC,SAAtB;AACH;AACJ,GAfD;AAgBA,SAAOT,YAAP;AACH,CAjCD","sourcesContent":["var os = require('os');\n\n// Retrieves all interfaces that do feature some non-internal address.\n// This function does NOT employ caching as to reflect the current state\n// of the machine accurately.\nmodule.exports = function () {\n    var allAddresses = {};\n\n    try {\n        var ifaces = os.networkInterfaces();\n    } catch (e) {\n        // At October 2016 WSL does not support os.networkInterfaces() and throws\n        // Return empty object as if no interfaces were found\n        // https://github.com/Microsoft/BashOnWindows/issues/468\n        if (e.syscall === 'uv_interface_addresses') {\n            return allAddresses;\n        } else {\n            throw e;\n        };\n    };\n\n    Object.keys(ifaces).forEach(function (iface) {\n        var addresses = {};\n        var hasAddresses = false;\n        ifaces[iface].forEach(function (address) {\n            if (!address.internal) {\n                addresses[(address.family || \"\").toLowerCase()] = address.address;\n                hasAddresses = true;\n                if (address.mac && address.mac !== '00:00:00:00:00:00') {\n                    addresses.mac = address.mac;\n                }\n            }\n        });\n        if (hasAddresses) {\n            allAddresses[iface] = addresses;\n        }\n    });\n    return allAddresses;\n};\n\n"]},"metadata":{},"sourceType":"script"}